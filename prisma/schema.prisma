// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  COMPANY
}

enum Plan {
  FREE
  ENTERPRISE
  COMMERCIAL
}

enum SubscriptionPeriod {
  MONTHLY
  YEARLY
}

enum Status {
  ACTIVE
  SUSPENDED
}

enum APPLICANT_STATUS {
  PENDING
  SHORTLISTED
  REJECTED
}

enum DIS {
  YES
  NO
}

model User {
  id               String     @id @default(cuid()) @map("_id")
  email            String     @unique
  password         String
  emailVerified    DateTime?  @map("email_verified")
  role             UserRole   @default(USER)
  candidate        Candidate? @relation("UserToCandidate")
  company          Company?   @relation("UserToCompany")
  profileCompleted Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("users")
}

model Candidate {
  id                     String                   @id @default(cuid()) @map("_id")
  logo                   String?
  linkedIn               String?
  websiteLink            String?
  countryName            String?
  cityName               String?
  address                String?
  phone                  String?
  email                  String?
  gender                 String?
  firstName              String?
  lastName               String?
  presentation           String?
  contractType           String?
  sectorPref             String?
  positionName           String?
  disability             DIS?                     @default(NO)
  age                    DateTime?
  experience             String?
  salaryExpectation      String?
  profileType            String?
  hardSkills             String[]
  softSkills             String[]
  resume                 String?
  academicBackground     AcademicBackground[]
  professionalExperience ProfessionalExperience[]
  hobbies                String[]                 @default([])
  appliedJobs                   AppliedJobs[]
  user                   User                     @relation(fields: [userId], references: [id], name: "UserToCandidate")
  userId                 String                   @unique
  portfolioLink          String?
  favorites              String[]
}

model ProfessionalExperience {
  id           Int       @id @default(autoincrement()) @map("_id")
  positionName String
  companyName  String
  startDate    DateTime
  endDate      DateTime
  description  String
  candidateId  String
  candidate    Candidate @relation(fields: [candidateId], references: [id])
}

model AcademicBackground {
  id            Int       @id @default(autoincrement()) @map("_id")
  instituteName String
  speciality    String
  startDate     DateTime
  endDate       DateTime
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model Company {
  id           String  @id @default(cuid()) @map("_id")
  logo         String?
  websiteLink  String?
  companyName  String?
  sector       String?
  countryName  String?
  cityName     String?
  address      String?
  phone        String?
  email        String?
  gender       String?
  firstName    String?
  lastName     String?
  presentation String?

  user         User          @relation(fields: [userId], references: [id], name: "UserToCompany")
  userId       String        @unique
  jobs         Job[]
  subscription Subscription?
  customerId   String?       @unique
  favorites    String[]
  plan         Plan          @default(FREE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Job {
  id           String           @id @default(cuid()) @map("_id")
  positionName String
  description     String
  contractType String
  genderPref   String[]
  disable      String
  ageLimit     String[]
  experience   String[]
  annualSalary Int[]
  hardSkills   String[]
  softSkills   String[]
  status       Status        @default(ACTIVE)
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  candidates   AppliedJobs[]
  // favorites    Favorite[]
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Subscription {
  id        String             @id @default(cuid()) @map("_id")
  companyId String             @unique
  plan      Plan
  email     String?
  period    SubscriptionPeriod
  startDate DateTime           @default(now())
  endDate   DateTime
  company   Company            @relation(fields: [companyId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

// model Favorite {
//   id          Int       @id @default(autoincrement()) @map("_id")
//   candidate   Candidate @relation(fields: [candidateId], references: [id])
//   candidateId String // Foreign key to the Candidate table
//   job         Job       @relation(fields: [jobId], references: [id])
//   jobId       Int // Foreign key to the Job table
//   createdAt   DateTime  @default(now())

//   @@unique([candidateId, jobId]) // Ensure a candidate can only like a specific job once
// }

model AppliedJobs {
  id          Int              @id @default(autoincrement()) @map("_id")
  candidate   Candidate        @relation(fields: [candidateId], references: [id])
  candidateId String
  job         Job              @relation(fields: [jobId], references: [id])
  jobId       String
  status      APPLICANT_STATUS @default(PENDING)
  createdAt   DateTime         @default(now())

  @@unique([candidateId, jobId]) // ðŸ”¥ Ensures an applicant applies only once per job
}

model Position{
  id          Int               @id @default(autoincrement())
  key         String            @unique
  value       String[]
}